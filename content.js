// Ch√®n file inject.js v√†o ng·ªØ c·∫£nh trang web
const script = document.createElement('script');
script.src = chrome.runtime.getURL('inject.js');
script.onload = function () {
  // X√≥a script kh·ªèi DOM sau khi ƒë√£ th·ª±c thi ƒë·ªÉ tr√°nh √¥ nhi·ªÖm DOM
  this.remove();
};
document.documentElement.appendChild(script);
const textColor = "#1b1e6c"
// L·∫Øng nghe s·ª± ki·ªán 'crumbsData' ƒë∆∞·ª£c g·ª≠i t·ª´ inject.js
window.addEventListener('crumbsData', (event) => {
  const crumbs = event.detail.crumbs;

  sleep(1000).then(() => {

    // Ki·ªÉm tra n·∫øu crumbs kh√¥ng t·ªìn t·∫°i
    if (!crumbs) {
      console.error('Crumbs kh√¥ng t·ªìn t·∫°i!');
      return;
    }

    // URL API ƒë∆∞·ª£c x√¢y d·ª±ng d·ª±a tr√™n crumbs
    const url = `https://realestate.yahoo.co.jp/api/v2/personal/favorite/conditions?bk=&crumb=${crumbs}&infoDiv=app`;
    let topDiv = findListInfoMail()
    addButtonToTopDiv(topDiv, url);    // Th√™m button v√†o topDiv

    // G·ª≠i y√™u c·∫ßu GET t·ªõi API b·∫±ng jQuery AJAX
    $.ajax({
      url: url,
      method: 'GET',
      dataType: 'json', // ƒê·ªãnh d·∫°ng d·ªØ li·ªáu tr·∫£ v·ªÅ l√† JSON
      success: function (data) {
        console.log('K·∫øt qu·∫£ tr·∫£ v·ªÅ:', data);

        // L·∫•y danh s√°ch conditions t·ª´ ph·∫£n h·ªìi c·ªßa API
        const conditions = data.ResultSet.conditions;
        console.log(conditions);

        // Duy·ªát qua t·ª´ng condition
        for (const cond of conditions) {
          let apiParams = cond.apiParams; // C√°c tham s·ªë c·ªßa API li√™n quan ƒë·∫øn condition
          // L√†m s·∫°ch apiParams b·∫±ng c√°ch lo·∫°i b·ªè c√°c gi√° tr·ªã kh√¥ng h·ª£p l·ªá
          apiParams = cleanObject(apiParams);

          // Chuy·ªÉn apiParams th√†nh Map ƒë·ªÉ d·ªÖ truy c·∫≠p v√† s·ª≠ d·ª•ng
          let mapApiParams = new Map();
          Object.entries(apiParams).forEach(([key, value]) => {
            mapApiParams.set(key, value);
          });

          // X·ª≠ l√Ω labels: chuy·ªÉn th√†nh Map, h·ªó tr·ª£ c√°c labels l·ªìng nhau
          let mapLabels = new Map();
          if (cond.label) {
            Object.entries(cond.label).forEach(([key, value]) => {
              if (typeof value === 'string' || value instanceof String) {
                mapLabels.set(key, value);
              } else {
                Object.entries(value).forEach(([key2, value2]) => {
                  mapLabels.set(`${key}.${key2}`, value2);
                });
              }
            });
          }

          // X·ª≠ l√Ω alerts: chuy·ªÉn th√†nh Map
          let mapAlertValues = new Map();
          if (cond.alerts) {
            Object.entries(cond.alerts).forEach(([key, value]) => {
              mapAlertValues.set(key, value);
            });
          }

          // T·∫°o ƒë·ªëi t∆∞·ª£ng t√≥m t·∫Øt condition
          let summaryObject = {
            id: cond.id,
            url: cond.url,
            saveName: cond.saveName,
            date: cond.date,
            apiParams: mapApiParams,
            labels: mapLabels,
            alertValues: mapAlertValues
          };

          console.log(summaryObject);
          let parentDiv = findDivOfCondition(cond.id);
          if (parentDiv) {
            // Append c√°c element v√†o parentDiv
            // T·∫°o b·∫£ng
            let table = $('<table border="1" style="width: 100%; margin-top: 10px; border-collapse: collapse; font-size: 10px;">');

            // T·∫°o header cho b·∫£ng
            table.append(`
              <thead style="background-color: ${textColor}; color: white; font-size: 1.1em;">
                  <tr>
                    <th style="padding: 10px; text-align: left; vertical-align: top;">ApiParams</th>
                    <th style="padding: 10px; text-align: left; vertical-align: top;">Label</th>
                    <th style="padding: 10px; text-align: left; vertical-align: top;">Alert</th>
                  </tr>
              </thead>
              <tbody style="line-height: 1.1;">
                <tr>
                  <td style="padding: 10px; text-align: left; vertical-align: top; color: ${textColor}">${listOf(summaryObject.apiParams)}</td>
                  <td style="padding: 10px; text-align: left; vertical-align: top; color: ${textColor}">${listOf(summaryObject.labels)}</td>
                  <td style="padding: 10px; text-align: left; vertical-align: top; color: ${textColor}">${listOf(summaryObject.alertValues)}</td>
                </tr>
              </tbody>
          `);
            // Append b·∫£ng v√†o parentDiv
            parentDiv.append(table);

            // Th√™m c√°c th√¥ng tin c∆° b·∫£n v√†o parentDiv
            parentDiv.append(`<br/>`);
            parentDiv.append(`<div><b>‚ö°Ô∏è id</b>: <code>${summaryObject.id}</code></div>`);
            parentDiv.append(`<div><b>‚ö°Ô∏è url</b>: <a href="${summaryObject.url}" target="_blank">${summaryObject.url}</a></div>`);

            // Ph√¢n t√≠ch URL b·∫±ng h√†m extractQuery
            let urlInfos = extractQuery(summaryObject.url);

            // T·∫°o link text ƒë·ªÉ hi·ªÉn th·ªã n·ªôi dung URL details
            const linkText = $(`
  <a href="#" style="color: #007BFF; text-decoration: underline; cursor: pointer; margin-top: 10px;">
    üîª Parse URL Details
  </a>
`);

            // N·ªôi dung URL details
            const urlDetails = $(`
  <div style="display: none; border: 1px solid #ddd; margin-top: 10px; padding: 10px; border-radius: 5px; background-color: #f9f9f9;">
    <div><b></b> <code>${urlInfos.baseUrl}</code></div>
    <ul>
      ${Array.from(urlInfos.params.entries())
                .map(([key, value]) => `<li> -- <b>${key}:</b> ${value}</li>`)
                .join('')}
    </ul>
  </div>
`);

            // Th√™m link text v√† n·ªôi dung URL details v√†o parentDiv
            parentDiv.append(linkText);
            parentDiv.append(urlDetails);

            // X·ª≠ l√Ω s·ª± ki·ªán click cho link text
            linkText.on('click', function (e) {
              e.preventDefault(); // NgƒÉn ch·∫∑n h√†nh ƒë·ªông m·∫∑c ƒë·ªãnh c·ªßa link
              if (urlDetails.is(':visible')) {
                urlDetails.slideUp(); // ·∫®n n·ªôi dung
                linkText.text('üîª Parse URL Details');
              } else {
                urlDetails.slideDown(); // Hi·ªÉn th·ªã n·ªôi dung
                linkText.text('üî∫ Hide URL Details');
              }
            });

          } else {
            console.error(`Kh√¥ng t√¨m th·∫•y parentDiv cho condition id: ${cond.id}`);
          }
        }
      },
      error: function (xhr, status, error) {
        console.error('L·ªói khi th·ª±c hi·ªán GET request:', status, error);
      }
    });
  });
});

function listOf(map) {
  let listItems = Array()
  map.forEach((value, key) => {
    listItems.push(`<li><b>${key}</b>: ${value}</li>`)
  })
  let out = `<ul>${listItems.join('')}</ul>`
  console.log(out)
  return out
}

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * H√†m t√¨m node cha ch·ª©a th·∫ª <a> v·ªõi class v√† thu·ªôc t√≠nh y√™u c·∫ßu
 * @param {string} conditionId - ID c·ªßa condition
 * @returns {jQuery|null} - Node cha ch·ª©a th·∫ª <a>, ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y
 */
function findDivOfCondition(conditionId) {
  // T√¨m th·∫ª <a> v·ªõi class l√† "BoxInquiry__title__deleteBtn" v√† thu·ªôc t√≠nh "data-cd_id" ph√π h·ª£p
  const $targetAnchor = $(`a.BoxInquiry__title__deleteBtn[data-cd_id="${conditionId}"]`);

  // N·∫øu kh√¥ng t√¨m th·∫•y th·∫ª <a>, log l·ªói v√† tr·∫£ v·ªÅ null
  if ($targetAnchor.length === 0) {
    console.error(`Kh√¥ng t√¨m th·∫•y th·∫ª <a> v·ªõi data-cd_id="${conditionId}"`);
    return null;
  }

  // Tr·∫£ v·ªÅ node cha ch·ª©a th·∫ª <a>
  return $targetAnchor.parent().parent();
}

/**
 * H√†m l√†m s·∫°ch ƒë·ªëi t∆∞·ª£ng b·∫±ng c√°ch lo·∫°i b·ªè c√°c key-value c√≥ gi√° tr·ªã null, undefined, ho·∫∑c chu·ªói r·ªóng
 * @param {Object} obj - ƒê·ªëi t∆∞·ª£ng c·∫ßn l√†m s·∫°ch
 * @returns {Object} - ƒê·ªëi t∆∞·ª£ng ƒë√£ lo·∫°i b·ªè c√°c gi√° tr·ªã kh√¥ng h·ª£p l·ªá
 */
function cleanObject(obj) {
  // Chuy·ªÉn object th√†nh m·∫£ng c√°c c·∫∑p key-value, l·ªçc b·ªè c√°c gi√° tr·ªã kh√¥ng h·ª£p l·ªá, r·ªìi chuy·ªÉn v·ªÅ object
  return Object.fromEntries(
    Object.entries(obj).filter(([key, value]) => value != null && value !== '')
  );
}

/**
 * H√†m t√¨m th·∫ª <div> c√≥ class="ListInfoMail" v√† id="_ListInfoMail"
 * @returns {jQuery|null} - Tr·∫£ v·ªÅ th·∫ª <div> n·∫øu t√¨m th·∫•y, ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y
 */
function findListInfoMail() {
  // S·ª≠ d·ª•ng jQuery ƒë·ªÉ t√¨m th·∫ª <div> v·ªõi class v√† id c·ª• th·ªÉ
  const $div = $('div.ListInfoMail#_ListInfoMail');

  // Ki·ªÉm tra n·∫øu kh√¥ng t√¨m th·∫•y, tr·∫£ v·ªÅ null
  if ($div.length === 0) {
    console.error('Kh√¥ng t√¨m th·∫•y th·∫ª <div> v·ªõi class="ListInfoMail" v√† id="_ListInfoMail"');
    return null;
  }
  // Tr·∫£ v·ªÅ th·∫ª <div> t√¨m ƒë∆∞·ª£c
  return $div;
}

/**
 * Th√™m button v√†o `topDiv` v√† x·ª≠ l√Ω s·ª± ki·ªán click
 */
function addButtonToTopDiv(topDiv, url) {
  if (!topDiv || topDiv.length === 0) {
    console.error("Kh√¥ng t√¨m th·∫•y `topDiv` ƒë·ªÉ th√™m button.");
    return;
  }

  // T·∫°o button
  const button = $('<button>', {
    text: '‚ö°Ô∏è MyCondition ‚ö°Ô∏è', // Title c·ªßa button
    class: 'btn-get-info',               // Th√™m class n·∫øu c·∫ßn styling
    click: function () {
      // Khi click, m·ªü URL trong m·ªôt tab m·ªõi
      window.open(url, '_blank');
    }
  });

  // Append button v√†o topDiv
  topDiv.append(button);

  // Optionally: Styling cho button
  button.css({
    padding: '10px 20px',
    marginTop: '10px',
    backgroundColor: textColor,
    color: '#FFFFFF',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    fontSize: '16px'
  });

  // Hover effect
  button.hover(
    function () {
      $(this).css('backgroundColor', '#0056b3');
    },
    function () {
      $(this).css('backgroundColor', textColor);
    }
  );
}

/**
 * Ph√¢n t√≠ch URL v√† tr·∫£ v·ªÅ object ch·ª©a baseUrl v√† params
 * @param {string} url - ƒê∆∞·ªùng d·∫´n c·∫ßn ph√¢n t√≠ch
 * @returns {Object} - Object ch·ª©a baseUrl v√† params (d·∫°ng Map)
 */
function extractQuery(url) {
  // N·∫øu URL thi·∫øu domain, th√™m domain c·ªßa trang hi·ªán t·∫°i
  if (url.startsWith('/')) {
    url = `${window.location.origin}${url}`;
  }
  // T·∫°o ƒë·ªëi t∆∞·ª£ng URL t·ª´ chu·ªói url
  const urlObject = new URL(url);
  // L·∫•y baseUrl (ph·∫ßn URL tr∆∞·ªõc d·∫•u '?')
  const baseUrl = `${urlObject.origin}${urlObject.pathname}`;
  // L·∫•y params t·ª´ chu·ªói query
  const params = new Map();
  urlObject.searchParams.forEach((value, key) => {
    params.set(key, value);
  });
  return {
    baseUrl: baseUrl,
    params: params
  };
}

